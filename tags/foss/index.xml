<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FOSS on The Quartermaster project.</title>
    <link>https://qmstr.org/tags/foss/</link>
    <description>Recent content in FOSS on The Quartermaster project.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Apr 2019 08:00:00 +0100</lastBuildDate>
    
	<atom:link href="https://qmstr.org/tags/foss/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Quartermaster Sprint 4.3 Development Report: Documentation, documentation, documentation</title>
      <link>https://qmstr.org/blog/2019/04/03/qmstr-sprint-4.3-report/</link>
      <pubDate>Wed, 03 Apr 2019 08:00:00 +0100</pubDate>
      
      <guid>https://qmstr.org/blog/2019/04/03/qmstr-sprint-4.3-report/</guid>
      <description>&lt;p&gt;The QMSTR sprints 4.2 and 4.3 (this report covers both) are part of
our current efforts to merge the ongoing QMSTR development and the
FASTEN project. A key necessity for this was documentation. Everybody
loves to write documentation, especially developers. Right? :-) To
make it even more fun, we work on integrating end user and
administrator documentation with the project source code and perform
automated integration test automatically. We hope that this approach
leads to documentation that works and is reliable. Even though this
effort is still ongoing, some results are already visible. One of them
is the project documentation on the main web site. Some feature
development primarily on the node management command line interface is
also in progress. It should be finished in time for the QMSTR 0.4
release, planned for April 17.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Announcing Quartermaster 0.5 Requirements Workshop and Hack Day: April 3 and 4, 2019</title>
      <link>https://qmstr.org/blog/2019/02/25/qmstr-requirements-workshop-0.5/</link>
      <pubDate>Mon, 25 Feb 2019 08:00:00 +0100</pubDate>
      
      <guid>https://qmstr.org/blog/2019/02/25/qmstr-requirements-workshop-0.5/</guid>
      <description>&lt;p&gt;To prepare the development work on the quarterly QMSTR milestone
releases, the team organizes requirements workshops open to the
community. We are currently working on version 0.4, which is expected
to be released in early April. 0.5 will be developed in the second
quarter of 2019. The 0.5 requirements workshop will take place on
April 3 and 4, 2019 at Endocode&amp;rsquo;s office in Berlin, Germany, right
before the &lt;a href=&#34;https://github.com/Open-Source-Compliance/Sharing-creates-value&#34;&gt;Compliance Tooling
Group&lt;/a&gt;
meeting, &lt;a href=&#34;https://foss-north.se/2019/&#34;&gt;FOSS-NORTH&lt;/a&gt; and &lt;a href=&#34;https://fsfe.org/activities/ftf/legal-conference.en.html&#34;&gt;LLW
2019&lt;/a&gt;. There
is a limited availability of 20 seats, so please register early by
using the contact form on the web site.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quartermaster Sprint 4.1 Development Report: Go, Java and Python integration libraries</title>
      <link>https://qmstr.org/blog/2019/02/20/qmstr-sprint-4.1-report/</link>
      <pubDate>Wed, 20 Feb 2019 08:00:00 +0100</pubDate>
      
      <guid>https://qmstr.org/blog/2019/02/20/qmstr-sprint-4.1-report/</guid>
      <description>&lt;p&gt;The key goal of QMSTR milestone 4 is to stabilize the APIs and
streamline the documentation and tutorials to prepare the integration
with the development work that takes part in
the &lt;a href=&#34;https://www.fasten-project.eu/&#34;&gt;FASTEN project&lt;/a&gt; and
in
&lt;a href=&#34;https://www.linuxfoundation.org/press-release/2018/12/the-linux-foundation-to-launch-new-tooling-project-to-improve-open-source-compliance/&#34;&gt;ACT&lt;/a&gt;. To
prepare for that, sprint 4.1 focused on refactoring the integration
libraries for Go, Java and Python that developers use to
create &lt;a href=&#34;https://github.com/QMSTR&#34;&gt;QMSTR&lt;/a&gt; modules and client side
tools. These libraries help users to create diverse sets of modules
and client side code to fit their needs, and facilitate the
integration with various services like CI/CD environments.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quartermaster Milestone 3 Development Report: C&#43;&#43;, Linux, CCache</title>
      <link>https://qmstr.org/blog/2019/02/07/qmstr-milestone-3-report/</link>
      <pubDate>Thu, 07 Feb 2019 08:00:00 +0100</pubDate>
      
      <guid>https://qmstr.org/blog/2019/02/07/qmstr-milestone-3-report/</guid>
      <description>&lt;p&gt;Version 0.3 of Quartermaster was tagged on February 1, 2019. It
includes improvements to allow for example the Linux kernel, glibc and
openssl as projects under analysis. It delivers support for snapshots
of the knowledge graph, which allows rolling back changes to a known
state, as well as support for source code in assembly language. It
improves the support for &lt;code&gt;ccache&lt;/code&gt;, &lt;code&gt;ar&lt;/code&gt;, &lt;code&gt;ld&lt;/code&gt; and &lt;code&gt;objcopy&lt;/code&gt;, and for
analyzing source code elements that are generated during the build and
are not part of the original source code package. Quartermaster is
Free and Open Source software and developed under a collaborative open
governance model. As usual, the source code is available on
&lt;a href=&#34;https://github.com/QMSTR/qmstr/releases/tag/v0.3&#34;&gt;Github&lt;/a&gt;. Read more
for all the details on the new release.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quartermaster Milestone 2 Development Report: Python client modules, SPDX, more automation</title>
      <link>https://qmstr.org/blog/2018/08/08/qmstr-milestone-2-report/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0100</pubDate>
      
      <guid>https://qmstr.org/blog/2018/08/08/qmstr-milestone-2-report/</guid>
      <description>&lt;p&gt;After another quarter of intense software development, we are proud to
announce the availability of Quartermaster v0.2. Quartermaster is a
toolchain that automates the analysis and documentation of Open Source
license compliance. Software vendors - businesses as well as Open
Source communities - deploy Quartermaster in their build pipelines to
create compliance documentation while software package share being
created. With the new version, Quartermaster learns to ingest SPDX
formatted source code manifests, adds a client library for developing
analyzer or reporter modules in the Python programming
language, adds support for running multiple build processes on the
same hardware concurrently, and much more. Quartermaster is Free and
Open Source software and developed under a collaborative open
governance model. Get the &lt;a href=&#34;https://github.com/QMSTR/qmstr/releases/tag/v0.2&#34;&gt;source code from Github while it is
hot&lt;/a&gt;! Read more for
all the details on the new release.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quartermaster Milestone 1 Development Report: Voil√†, a modular, extendable FOSS Compliance Toolchain</title>
      <link>https://qmstr.org/blog/2018/04/25/qmstr-milestone-1-report/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0100</pubDate>
      
      <guid>https://qmstr.org/blog/2018/04/25/qmstr-milestone-1-report/</guid>
      <description>&lt;p&gt;Version 0.1 is here. After a proof-of-concept, plenty of drafting,
feedback and discussions, a prototype, and finally three months of
development focused on creating a useful product, we are tagging a
first version of Quartermaster. The theme of the first version was to
implement the toolchain basics: the compliance knowledge graph, the
master container, the elemental workflow with a construction, analysis
and reporting phase, and the APIs for modules to interact with the
knowledge graph in each of these phases. There are public showcases
that demonstrate the functionality implemented so far. After gathering
functional and legal requirements, the team will now move on to
milestone 2, where we will focus on making use of the building blocks
from the first version to implement badly needed functions of
generating license compliance documentation - an SPDX manifest
analyzer, integration with Fossology, and features to aggregate
analysis results from different sources into reports.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quartermaster v0.1 development update #5: The reporting API and &#34;Easy Mode&#34;</title>
      <link>https://qmstr.org/blog/2018/04/09/qmstr-newsletter-8/</link>
      <pubDate>Mon, 09 Apr 2018 00:00:00 +0100</pubDate>
      
      <guid>https://qmstr.org/blog/2018/04/09/qmstr-newsletter-8/</guid>
      <description>&lt;p&gt;Spring is coming, and so is Quartermaster v0.1! One more sprint to get
there. Sprint 5 saw the implementation of initial support for Gradle
based Java projects, a finished definition of the reporting API, the
introduction of &amp;ldquo;easy mode&amp;rdquo; (see below), improved author detection and
more steps towards an automated HTML reporter. Sprint 5 was the last
round of new features before Quartermaster v0.1 will be wrapped up for
release. We will use the final sprint in this quarter to tie up loose
ends, polish, containerise, document and demonstrate, and to prepare
the v0.1 release. The first milestone will be concluded with the v0.2
requirements workshop on April 11.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quartermaster v0.1 development update #4: Major refactoring, requirements workshop April 11</title>
      <link>https://qmstr.org/blog/2018/03/22/qmstr-newsletter-7/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0100</pubDate>
      
      <guid>https://qmstr.org/blog/2018/03/22/qmstr-newsletter-7/</guid>
      <description>&lt;p&gt;After the basics of the Quartermaster toolchain are in place, we
focused on a refactoring of the master APIs. The key goal is to make
implementing modules for the three phases straightforward, composable
and as simple as possible. All modules now run in separate processes
that communicate with the master over the network. This decouples both
the module and the master code, as well as the licensing models of the
modules and the master. It is now possible to run multiple analysers
configurable from the master. Analyzers may report multiple
or overlapping findings of the same type, like copyright holders,
without interfering with each other. Based on this, we can now
implement modular reporters that generate HTML and SPDX, or
notifications, or other kinds of feedback.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quartermaster v0.1 development update #3: It works - now make it easier</title>
      <link>https://qmstr.org/blog/2018/03/13/qmstr-newsletter-6/</link>
      <pubDate>Tue, 13 Mar 2018 00:00:00 +0100</pubDate>
      
      <guid>https://qmstr.org/blog/2018/03/13/qmstr-newsletter-6/</guid>
      <description>&lt;p&gt;In sprint #3 towards Quartermaster v0.1, we made it easer to package
the master into a Docker container using
a
&lt;a href=&#34;https://docs.docker.com/develop/develop-images/multistage-build/&#34;&gt;multi-stage Docker file&lt;/a&gt;,
merged the &lt;code&gt;qmstr-container&lt;/code&gt; repository into the &lt;code&gt;qmstr&lt;/code&gt; one, set up
more CI to endure quality of the master HEAD and the incoming PRs,
extended license detection with ScanCode and Ninka, and began
implementing the reporting API endpoint. You can now see the build and
test results both for incoming PRs as well as for the master mainline
branch. Finally we prepared Quartermaster to be presented at
the
&lt;a href=&#34;https://events.linuxfoundation.org/events/open-source-leadership-summit-2018/&#34;&gt;Open Source Leadership Summit&lt;/a&gt;. We
made good progress, even though the setup is still a bit rough at the
edges. It works, but the APIs are not yet as modular as we want them
to be. We will focus on that in the next sprint.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quartermaster v0.1 development update #2: Key building blocks are falling into place</title>
      <link>https://qmstr.org/blog/2018/02/23/qmstr-newsletter-5/</link>
      <pubDate>Fri, 23 Feb 2018 00:00:00 +0100</pubDate>
      
      <guid>https://qmstr.org/blog/2018/02/23/qmstr-newsletter-5/</guid>
      <description>&lt;p&gt;It feels great when a plan comes together. After the requirements
workshop on January 17, the Quartermaster team had a pretty good
understanding of what the architecture of the toolchain should look
like. Two weeks into development, we now see that the design is solid,
and that the runtime phases and modular analysis and reporting
concepts work well. The details of the architecture will be explained
in an upcoming blog post. Right now, we are making good progress
towards a working system. The &lt;code&gt;curl&lt;/code&gt; demo was extended, we added the
&lt;code&gt;qmstr-cli&lt;/code&gt; tool to manage the master, and set up the first internal
CI.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quartermaster v0.1 development update #1</title>
      <link>https://qmstr.org/blog/2018/02/13/qmstr-newsletter-4/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0100</pubDate>
      
      <guid>https://qmstr.org/blog/2018/02/13/qmstr-newsletter-4/</guid>
      <description>&lt;p&gt;We hope you are ready for some fireworks as we kick of the development
of the first Quartermaster version that aims for general
availability. The goal for this sprint, after we wrapped up prototype
development in the previous one, was to establish all the building
blocks that will make the Quartermaster toolchain. They are based on
the new system architecture developed at the requirements workshop on
January 17, and based (but developed from scratch) on the learnings
from the prototype. At the end of the sprint, we had a working
Quartermaster again, with some fancy graph visualisations.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quartermaster prototype development update #3</title>
      <link>https://qmstr.org/blog/2018/01/29/qmstr-newsletter-3/</link>
      <pubDate>Mon, 29 Jan 2018 00:00:00 +0100</pubDate>
      
      <guid>https://qmstr.org/blog/2018/01/29/qmstr-newsletter-3/</guid>
      <description>&lt;p&gt;The third Quartermaster prototype development sprint also marked the
end of development of the Quartermaster prototype. Our main goal for
the prototype was to work with our partners and collaborators to
develop an approach to FOSS compliance automation that delivers
correct and complete results in a variety of use cases. The
integration of new build systems has been tested, the workflow phases
have been refined and abstracted further and limits of the prototype
design identified. We wrapped up the sprint with a workshop where the
functionality of the prototype was evaluated and the findings applied
to a draft architecture of the first production release of
Quartermaster.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quartermaster prototype development update #2</title>
      <link>https://qmstr.org/blog/2017/12/20/qmstr-newsletter-2/</link>
      <pubDate>Wed, 20 Dec 2017 00:00:00 +0100</pubDate>
      
      <guid>https://qmstr.org/blog/2017/12/20/qmstr-newsletter-2/</guid>
      <description>In the second Quartermaster prototype development sprint, we focused on the connection between Continuous Integration and the build instrumentation performed by Quartermaster. Jenkins serves as the reference build system for the prototype. We wanted to lay the foundation for executing Quartermaster instrumented builds from a CI build queue, and creating a feedback loop to developers by feeding FOSS compliance analysis results back into the build results page.
Sprint #2: Initial integration between CI and Quartermaster With the end of this sprint, we published an initial plugin to Jenkins that communicates with the Quartermaster master process running adjacent to the software build process.</description>
    </item>
    
    <item>
      <title>Quartermaster prototype development update #1</title>
      <link>https://qmstr.org/blog/2017/12/11/qmstr-newsletter-1/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0100</pubDate>
      
      <guid>https://qmstr.org/blog/2017/12/11/qmstr-newsletter-1/</guid>
      <description>Quartermaster is a community building project as much as it is a technical one. The idea to collaboratively build FOSS compliance tooling that is itself free and open source software has raised interest that has almost been overwhelming for us (in a good way). With these development updates, we want to inform our quickly growing community of contributors and partners about what has been achieved so far, and where development is headed next.</description>
    </item>
    
  </channel>
</rss>